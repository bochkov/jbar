import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'com.github.ben-manes.versions' version '0.51.0'
}

ext {
    platformArgs = []
    if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
        swtPlatform = 'win32.win32.x86_64'
    } else if (DefaultNativePlatform.getCurrentOperatingSystem().isMacOsX()) {
        swtPlatform = 'cocoa.macosx.x86_64'
        platformArgs += ["-XstartOnFirstThread", "-Xdock:name=JBar"]
    } else {
        swtPlatform = 'linux.linux.x86_64'
    }
}

group = 'com.sergeybochkov'
version = '2.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.eclipse.platform:org.eclipse.swt.${swtPlatform}:3.127.0") {
        transitive = false
    }
    implementation 'net.sourceforge.barbecue:barbecue:1.5-beta1'
    implementation 'commons-io:commons-io:2.17.0'

    implementation 'ch.qos.logback:logback-classic:1.5.12'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.3'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'com.sergeybochkov.jbar.Application'
    applicationDefaultJvmArgs = ["-Xmx64m", "-Dfile.encoding=UTF-8"] + platformArgs
}

tasks.register('macApp') {
    dependsOn 'build'
    doLast {
        def outDir = "$buildDir/macApp" as File
        def appDir = "$outDir/JBar.app" as File
        delete outDir
        project.file(appDir).mkdirs()
        copy {
            from tarTree(distTar.archiveFile)
            into "$appDir/Contents/MacOS"
        }
        copy {
            from 'src/main/resources/images/barcode.icns'
            into "$appDir/Contents/Resources"
        }
        copy {
            from 'src/main/resources/Info.plist'
            into "$appDir/Contents"
            filter { line -> line.replace('{{ root }}', distTar.getArchiveBaseName().get() + "-" + distTar.getArchiveVersion().get()) }
        }
        copy {
            from 'src/main/resources/PkgInfo'
            into "$appDir/Contents"
        }
    }
}
